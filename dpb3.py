from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, CallbackQueryHandler
import sqlite3
from datetime import timedelta
import asyncio
import logging
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CommandHandler, CallbackQueryHandler
import aiosqlite
import sys
from telegram import CallbackQuery

logging.getLogger("httpx").setLevel(logging.WARNING)
logging.basicConfig(level=logging.INFO)
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
NAME, FOLLOWERS, UPDATE_FOLLOWERS,BLOG_THEME, ADD_IDEA, ADD_TASK, BROADCAST, START_BROADCAST, WAIT_BROADCAST_MESSAGE = range(9)
SEND_BROADCAST_TEXT = 10

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot_debug.log'),  # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
        logging.StreamHandler()  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = 700013214

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
   # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            name TEXT NOT NULL,
            followers INTEGER NOT NULL,
            blog_theme TEXT NOT NULL,
            registered_at TEXT NOT NULL
        )
    ''')
    # –¢–∞–±–ª–∏—Ü–∞ –∏–¥–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS ideas (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            idea TEXT NOT NULL,
            theme TEXT NOT NULL
        )
    ''')
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∑–∞–¥–∞–Ω–∏–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS tasks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            task TEXT NOT NULL,
            theme TEXT NOT NULL
        )              
    ''')
    conn.commit()
    conn.close()
    

def get_random_idea_by_theme(theme: str):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT idea FROM ideas WHERE theme = ? ORDER BY RANDOM() LIMIT 1', (theme,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else None


def get_random_task_by_theme(theme: str):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT task FROM tasks WHERE theme = ? ORDER BY RANDOM() LIMIT 1', (theme,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else None





async def debug_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text}")

#–º–µ–Ω—é —Ç–µ–º –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è –∏ –∏–¥–µ–∏
async def show_theme_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info(f"=== –ü–æ–∫–∞–∑ –º–µ–Ω—é —Ç–µ–º ===")
    logging.info(f"–§–ª–∞–≥–∏: adding_idea={context.user_data.get('adding_idea')}, adding_task={context.user_data.get('adding_task')}")
    query = update.callback_query if hasattr(update, 'callback_query') else update
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("–õ–∏—á–Ω—ã–π –±–ª–æ–≥", callback_data="theme_personal")],
        [InlineKeyboardButton("–°–ø–æ—Ä—Ç", callback_data="theme_sports")],
        [InlineKeyboardButton("–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è", callback_data="theme_psychology")],
        [InlineKeyboardButton("–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", callback_data="theme_technology")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if context.user_data.get('adding_idea'):
        text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –Ω–æ–≤–æ–π –∏–¥–µ–∏:"
    elif context.user_data.get('adding_task'):
        text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:"
    else:
        text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:"

    try:
        await query.edit_message_text(text=text, reply_markup=reply_markup)
    except:
        await query.message.reply_text(text=text, reply_markup=reply_markup)

# –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –∏–¥–µ–∏ –∏ –∑–∞–¥–∞–Ω–∏—è
async def send_random_idea(update: Update, context: ContextTypes.DEFAULT_TYPE, theme: str):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT idea FROM ideas WHERE theme = ? ORDER BY RANDOM() LIMIT 1', (theme,))
    result = cursor.fetchone()
    conn.close()
    if result:
        idea = result[0]
        await update.edit_message_text(f"üí° –í–æ—Ç –∏–¥–µ—è –¥–ª—è Reels:\n{idea}")
    else:
        await update.edit_message_text("‚ùå –ò–¥–µ–∏ –¥–ª—è —ç—Ç–æ–π —Ç–µ–º—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

async def send_random_task(update: Update, context: ContextTypes.DEFAULT_TYPE, theme: str):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT task FROM tasks WHERE theme = ? ORDER BY RANDOM() LIMIT 1', (theme,))
    result = cursor.fetchone()
    conn.close()
    if result:
        task = result[0]
        await update.edit_message_text(f"üìù –í–æ—Ç –≤–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ:\n{task}")
    else:
        await update.edit_message_text("‚ùå –ó–∞–¥–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–π —Ç–µ–º—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")



# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def save_user_to_db(user_id: int, name: str, followers: int, blog_theme: str):
    try:
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        if cursor.fetchone():
            cursor.execute('''
                UPDATE users
                SET name = ?, followers = ?, blog_theme = ?
                WHERE user_id = ?
            ''', (name, followers, blog_theme, user_id))
        else:
            cursor.execute('''
                INSERT INTO users (user_id, name, followers, blog_theme, registered_at)
                VALUES (?, ?, ?, ?, datetime('now'))
            ''', (user_id, name, followers, blog_theme))
        conn.commit()
        logging.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    finally:
        conn.close()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def load_user_from_db(user_id: int):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT name, followers, registered_at FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    conn.close()
    if result:
        return {
            'name': result[0],
            'followers': result[1],
            'registered_at': result[2]
        }
    return None

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –∏–¥–µ–∏
def get_random_idea_by_theme(theme: str):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT idea FROM ideas WHERE theme = ? ORDER BY RANDOM() LIMIT 1', (theme,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else None

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
def get_random_task_by_theme(theme: str):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT task FROM tasks WHERE theme = ? ORDER BY RANDOM() LIMIT 1', (theme,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else None

async def send_random_idea(query, context, theme):
    idea = get_random_idea_by_theme(theme)
    if idea:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(f"üí° –í–æ—Ç –∏–¥–µ—è –¥–ª—è Reels:\n{idea}", reply_markup=reply_markup)
    else:
        await query.edit_message_text("‚ùå –ò–¥–µ–∏ –¥–ª—è —ç—Ç–æ–π —Ç–µ–º—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
    context.user_data.pop('getting_idea', None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info("–§—É–Ω–∫—Ü–∏—è start –≤—ã–∑–≤–∞–Ω–∞")
    user_id = update.effective_user.id
    user_data = load_user_from_db(user_id)
    if user_data:
        context.user_data.update(user_data)
        await update.message.reply_text(
            "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –í–æ—Ç –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
            f"–ò–º—è: {user_data['name']}\n"
            f"–ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {user_data['followers']}"
        )
        return await show_menu(update, context)
    if user_id == ADMIN_ID:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–µ–º –±–ª–æ–≥–µ.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
        )
    else:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–µ–º –±–ª–æ–≥–µ.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
        )
    return NAME

# –°–±–æ—Ä –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info("–§—É–Ω–∫—Ü–∏—è get_name –≤—ã–∑–≤–∞–Ω–∞")
    user_input = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
    if not user_input:
        logging.warning("–ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        await update.message.reply_text("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return NAME

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    if not all(char.isalpha() or char.isspace() or char == '-' for char in user_input):
        logging.warning("–ò–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã")
        await update.message.reply_text("‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ –¥–µ—Ñ–∏—Å—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return NAME

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['name'] = user_input
    logging.info(f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {user_input}")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É (–≤—ã–±–æ—Ä —Ç–µ–º—ã –±–ª–æ–≥–∞)
    keyboard = [
        [InlineKeyboardButton("–õ–∏—á–Ω—ã–π –±–ª–æ–≥", callback_data="theme_personal")],
        [InlineKeyboardButton("–°–ø–æ—Ä—Ç", callback_data="theme_sports")],
        [InlineKeyboardButton("–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è", callback_data="theme_psychology")],
        [InlineKeyboardButton("–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", callback_data="theme_technology")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –≤–∞—à–µ–≥–æ –±–ª–æ–≥–∞:", reply_markup=reply_markup)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    return BLOG_THEME

async def get_blog_theme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É
    theme = query.data
    logging.info(f"–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–µ–º–∞ –±–ª–æ–≥–∞: {theme}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context.user_data['blog_theme'] = theme

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ
    await query.edit_message_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ Instagram:")
    return FOLLOWERS

# –°–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def get_followers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.strip()
    if not user_input.isdigit():
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return FOLLOWERS
    followers = int(user_input)
    context.user_data['followers'] = followers
    user_id = update.effective_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    save_user_to_db(
        user_id,
        context.user_data['name'],
        followers,
        context.user_data.get('blog_theme', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—É –±–ª–æ–≥–∞
    )
    logging.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")

    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    return await show_menu(update, context)

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
async def update_followers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.strip()
    if not user_input.isdigit():
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return UPDATE_FOLLOWERS
    new_followers = int(user_input)
    old_followers = context.user_data.get('followers', 0)
    difference = new_followers - old_followers
    if difference > 0:
        message = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ó–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –≤—ã –Ω–∞–±—Ä–∞–ª–∏ {difference} –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!"
    elif difference == 0:
        message = "üí° –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å. –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º!"
    else:
        message = (
            f"üí™ –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! –£ –≤–∞—Å —É–º–µ–Ω—å—à–∏–ª–æ—Å—å {abs(difference)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤. "
            "–≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —è–≤–ª–µ–Ω–∏–µ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –∏ –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –≤–µ—Ä–Ω—É—Ç—Å—è!"
        )
    context.user_data['followers'] = new_followers
    save_user_to_db(update.effective_user.id, context.user_data['name'], new_followers)
    await update.message.reply_text(message)
    return await show_menu(update, context)

async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton("–ò–¥–µ–∏ –¥–ª—è Reels", callback_data="ideas")],
        [InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏—è", callback_data="tasks")],
        [InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
    ]
    if isinstance(update, Update):  # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç Update
        user_id = update.effective_user.id
    else:  # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç CallbackQuery –∏–ª–∏ Message
        user_id = update.from_user.id if hasattr(update, 'from_user') else update.chat.id

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id == ADMIN_ID:
        keyboard.append([InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∏–¥–µ—é", callback_data="add_idea")])
        keyboard.append([InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="add_task")])
        keyboard.append([InlineKeyboardButton("–†–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if isinstance(update, Update):
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)
    else:
        await update.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)

    return ConversationHandler.END

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è
async def show_profile(query: Update, context: ContextTypes.DEFAULT_TYPE):
    profile_info = (
        f"üìã –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"–ò–º—è: {context.user_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {context.user_data.get('followers', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–¢–µ–º–∞ –±–ª–æ–≥–∞: {context.user_data.get('blog_theme', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}"  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—É –±–ª–æ–≥–∞
    )
    if query.from_user.id == ADMIN_ID:
        profile_info += "\nüëë –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!"
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text=profile_info, reply_markup=reply_markup)
    
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∏–¥–µ—é"
async def add_idea_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–¥–µ–∏
    context.user_data['adding_idea'] = True
    context.user_data.pop('adding_task', None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
    await show_theme_menu(query, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"
async def add_task_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
    context.user_data['adding_task'] = True
    context.user_data.pop('adding_idea', None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–¥–µ–∏

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
    await show_theme_menu(query, context)





# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∏–¥–µ–∏
async def save_idea(update: Update, context: ContextTypes.DEFAULT_TYPE):
    idea = update.message.text.strip()
    theme = context.user_data.get('selected_theme')
    logging.info(f"=== –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–¥–µ–∏ ===")
    logging.info(f"–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: {context.user_data.get('selected_theme')}")
    logging.info(f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {update.message.text}")

    if not theme:
        logging.warning("–¢–µ–º–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
        await update.message.reply_text("‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    try:
        cursor.execute('INSERT INTO ideas (idea, theme) VALUES (?, ?)', (idea, theme))
        conn.commit()
        logging.info(f"–ò–¥–µ—è '{idea}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–µ–º—É '{theme}'")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–¥–µ–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–¥–µ–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    finally:
        conn.close()

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("‚úÖ –ò–¥–µ—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=reply_markup)

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏
    context.user_data.pop('adding_idea', None)
    context.user_data.pop('selected_theme', None)
    await update.message.reply_text("‚úÖ –ò–¥–µ—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    return ConversationHandler.END

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
async def save_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    task = update.message.text.strip()
    theme = context.user_data.get('selected_theme')
    logging.info(f"=== –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–¥–µ–∏ ===")
    logging.info(f"–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: {context.user_data.get('selected_theme')}")
    logging.info(f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {update.message.text}")

    if 'selected_theme' not in context.user_data:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É!")
        return await show_theme_menu(update, context)

    if not theme:
        logging.warning("–¢–µ–º–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
        await update.message.reply_text("‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    try:
        cursor.execute('INSERT INTO tasks (task, theme) VALUES (?, ?)', (task, theme))
        conn.commit()
        logging.info(f"–ó–∞–¥–∞–Ω–∏–µ '{task}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ–º—É '{theme}'")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    finally:
        conn.close()

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=reply_markup)

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏
    context.user_data.pop('adding_task', None)
    context.user_data.pop('selected_theme', None)

    return ConversationHandler.END


## –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def get_all_users():
    async with aiosqlite.connect('users.db') as db:
        cursor = await db.execute('SELECT user_id FROM users')
        users = await cursor.fetchall()
        return [user[0] for user in users]

## –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async def send_broadcast_message(message_text: str, context: ContextTypes.DEFAULT_TYPE):
    users = await get_all_users()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for user_id in users:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await context.bot.send_message(user_id, message_text)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–∞—Å—Å—ã–ª–∫–∞"
async def broadcast_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id == ADMIN_ID:
        keyboard = [
            [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="start_broadcast")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_message_text, –ø–æ—Ç–æ–º—É —á—Ç–æ —ç—Ç–æ callback_query, –∞ –Ω–µ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.callback_query.edit_message_text(
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.", reply_markup=reply_markup
        )

## –ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏
async def start_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    context.user_data['broadcast'] = True
    await update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
async def handle_broadcast_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'broadcast' not in context.user_data:
        return

    broadcast_text = update.message.text.strip()
    if not broadcast_text:
        await update.message.reply_text("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    await send_broadcast_message(broadcast_text, context)  # –ü–µ—Ä–µ–¥–∞–µ–º context
    await update.message.reply_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    context.user_data.pop('broadcast', None)

   
   

   
    





# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
    user_id = update.effective_user.id
    text = update.message.text.strip()
    logging.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç: {text}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª–∞–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–¥–µ–∏
    if context.user_data.get('adding_idea'):
        theme = context.user_data.get('theme')
        if not theme:
            logging.warning("–¢–µ–º–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
            await update.message.reply_text("‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        try:
            cursor.execute('INSERT INTO ideas (idea, theme) VALUES (?, ?)', (text, theme))
            conn.commit()
            logging.info(f"–ò–¥–µ—è '{text}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–µ–º—É '{theme}'")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–¥–µ–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–¥–µ–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        finally:
            conn.close()

        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("‚úÖ –ò–¥–µ—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=reply_markup)
        context.user_data.pop('adding_idea', None)
        context.user_data.pop('theme', None)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª–∞–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
    if context.user_data.get('adding_task'):
        theme = context.user_data.get('theme')
        if not theme:
            logging.warning("–¢–µ–º–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
            await update.message.reply_text("‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        try:
            cursor.execute('INSERT INTO tasks (task, theme) VALUES (?, ?)', (text, theme))
            conn.commit()
            logging.info(f"–ó–∞–¥–∞–Ω–∏–µ '{text}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ–º—É '{theme}'")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        finally:
            conn.close()

        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=reply_markup)
        context.user_data.pop('adding_task', None)
        context.user_data.pop('theme', None)
        return

    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Ñ–ª–∞–≥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")



    

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ò–¥–µ–∏ –¥–ª—è Reels"
async def ideas(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update  # update —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è CallbackQuery
    await query.answer()
    idea = get_random_idea_by_theme()
    if not idea:
        await query.edit_message_text("‚ùå –ò–¥–µ–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")
        return show_menu
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await show_theme_menu(query, context)  # –ü–µ—Ä–µ–¥–∞–µ–º query –Ω–∞–ø—Ä—è–º—É—é
    

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–¥–∞–Ω–∏—è"
async def tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update  # update —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è CallbackQuery
    await query.answer()
    task = get_random_task_by_theme()
    if not task:
        await query.edit_message_text("‚ùå –ó–∞–¥–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")
        return show_menu
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await show_theme_menu(query, context)  # –ü–µ—Ä–µ–¥–∞–µ–º query –Ω–∞–ø—Ä—è–º—É—é

# –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
async def weekly_update(context: ContextTypes.DEFAULT_TYPE):
    application = context.application
    logging.info("‚è∞ –ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")

    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_id, name FROM users')
    users = cursor.fetchall()
    conn.close()

    for user in users:
        user_id, name = user
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üåü –ü—Ä–∏–≤–µ—Ç, {name}! –ù–∞–ø–∏—à–∏ —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é:"
            )
            logging.info("f‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ Telegram API
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
def setup_weekly_updates(application):
    job_queue = application.job_queue
    if job_queue is None:
        raise ValueError("Job queue is not initialized.")
    
    job_queue.run_repeating(
        weekly_update,
        interval=7 * 24 * 60 * 60,  # –†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é
        first=5  # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
    )


async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton("–ò–¥–µ–∏ –¥–ª—è Reels", callback_data="ideas")],
        [InlineKeyboardButton("–ó–∞–¥–∞–Ω–∏—è", callback_data="tasks")],
        [InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
    ]
    if isinstance(update, Update):  # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç Update
        user_id = update.effective_user.id
    else:  # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç CallbackQuery –∏–ª–∏ Message
        user_id = update.from_user.id if hasattr(update, 'from_user') else update.chat.id

    if user_id == ADMIN_ID:
        keyboard.append([InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∏–¥–µ—é", callback_data="add_idea")])
        keyboard.append([InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="add_task")])
        keyboard.append([InlineKeyboardButton("–†–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    

    

    try:
        await query.edit_message_text(text="üìç –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply_markup)
    except:
        await query.message.reply_text(text="üìç –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply_markup)
    return ConversationHandler.END



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    logging.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å callback_data: {query.data}")
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å


    if query.data == "profile":
        await show_profile(query, context)
    elif query.data == "back_to_menu":
        await show_menu(query, context)
    elif query.data == "ideas":
        context.user_data['getting_idea'] = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–¥–µ–∏
        await show_theme_menu(query, context)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
    elif query.data == "tasks":
        context.user_data['getting_task'] = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
        await show_theme_menu(query, context)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã

    elif query.data.startswith("theme_"):
        theme = query.data.split("_")[1]
        context.user_data['selected_theme'] = theme  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É
    
    if context.user_data.get('adding_idea'):
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–π –∏–¥–µ–∏:")
        return ADD_IDEA  # –Ø–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        
    elif context.user_data.get('adding_task'):
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:")
        return ADD_TASK  # –Ø–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    elif context.user_data.get('getting_idea'):
        idea = get_random_idea_by_theme(context.user_data['selected_theme'])
        if idea:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(f"üí° –í–æ—Ç –∏–¥–µ—è –¥–ª—è Reels:\n{idea}", reply_markup=reply_markup)
        else:
            await query.edit_message_text("‚ùå –ò–¥–µ–∏ –¥–ª—è —ç—Ç–æ–π —Ç–µ–º—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        context.user_data.pop('getting_idea', None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥

    elif context.user_data.get('getting_task'):
        task = get_random_task_by_theme(context.user_data['selected_theme'])
        if task:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(f"üìù –í–æ—Ç –≤–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ:\n{task}", reply_markup=reply_markup)
        else:
            await query.edit_message_text("‚ùå –ó–∞–¥–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–π —Ç–µ–º—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        context.user_data.pop('getting_task', None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥


    elif query.data == "support":
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.", reply_markup=reply_markup)
    elif query.data == "add_idea":
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–¥–µ–∏
        context.user_data['adding_idea'] = True
        context.user_data.pop('adding_task', None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
        await show_theme_menu(query, context)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã

    elif query.data == "add_task":
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
        context.user_data['adding_task'] = True
        context.user_data.pop('adding_idea', None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–¥–µ–∏
        await show_theme_menu(query, context)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã

    elif query.data == "broadcast":
        if query.from_user.id == ADMIN_ID:
            await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
            return SEND_BROADCAST_TEXT
    else:
        logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å callback_data: {query.data}")
        await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")   

    return ConversationHandler.END

            
# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    application = ApplicationBuilder().token("8183509798:AAGCGEol_j0wQ50pmm8-O6H0YJoBCJWmTCk").build()


    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–æ–≤
    
    conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
        BLOG_THEME: [CallbackQueryHandler(get_blog_theme)],
        FOLLOWERS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_followers)],
        UPDATE_FOLLOWERS: [MessageHandler(filters.TEXT & ~filters.COMMAND, update_followers)],
        ADD_IDEA: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_idea)],
        ADD_TASK: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_task)],
        
    },
    fallbacks=[]
)



   
    
  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(conv_handler)  # –°–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º ConversationHandler
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(back_to_menu, pattern="back_to_menu"))
    application.add_handler(CallbackQueryHandler(button_handler))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(broadcast_button, pattern="broadcast"))
    application.add_handler(CallbackQueryHandler(start_broadcast, pattern="start_broadcast"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_broadcast_text))  # –¢–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    application.add_handler(MessageHandler(filters.ALL, debug_handler))  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))  # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞
    
    
   
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    setup_weekly_updates(application)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
     main()